apiVersion: v1
kind: Namespace
metadata:
  name: frigate
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: frigate-helmrelease
  namespace: frigate
spec:
  releaseName: frigate
  chart:
    spec:
      chart: frigate
      sourceRef:
        kind: HelmRepository
        name: frigate-helmrepo
        namespace: flux-system
      version: 7.6.0
  interval: 2h
  install:
    createNamespace: true
  values:
    installCRDs: true
  valuesFrom:
  - kind: ConfigMap
    name: frigate-helmchart-values-override
    valuesKey: values.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frigate-helmchart-values-override
  namespace: frigate
data:
  values.yaml: |-
    # Default values for frigate.
    # This is a YAML-formatted file.
    # Declare variables to be passed into your templates.
    # -- upgrade strategy type (e.g. Recreate or RollingUpdate)
    strategyType: Recreate
    image:
      # -- Docker registry/repository to pull the image from
      repository: ghcr.io/blakeblackshear/frigate
      # -- Overrides the default tag (appVersion) used in Chart.yaml ([Docker Hub](https://hub.docker.com/r/blakeblackshear/frigate/tags?page=1))
      tag: 0.14.1
      # -- Docker image pull policy
      pullPolicy: IfNotPresent
    # -- Docker image pull policy
    imagePullSecrets: []
    # -- additional ENV variables to set. Prefix with FRIGATE_ to target Frigate configuration values
    env: {}
      # TZ: UTC
    envFromSecrets:
      - frigate-secrets
    coral:
      # -- enables the use of a Coral device
      enabled: false
      # -- path on the host to which to mount the Coral device
      hostPath: /dev/bus/usb
    gpu:
      nvidia:
        # -- Enables NVIDIA GPU compatibility. Must also use the "amd64nvidia" tagged image
        enabled: false

        # -- Overrides the default runtimeClassName
        runtimeClassName:
    # -- declare extra volumes to use for Frigate
    extraVolumes: []
    # -- declare additional volume mounts
    extraVolumeMounts: []
    # -- amount of shared memory to use for caching
    shmSize: 1Gi
    # -- use memory for tmpfs (mounted to /tmp)
    tmpfs:
      enabled: true
      sizeLimit: 1Gi
    # nameOverride -- Overrides the name of resources
    nameOverride: ""
    # fullnameOverride -- Overrides the Full Name of resources
    fullnameOverride: ""
    # -- frigate configuration - see [Docs](https://docs.frigate.video/configuration/index) for more info
    config: |
      mqtt:
        host: '{FRIGATE_MQTT_HOST}'
        port: 1883
        topic_prefix: frigate
        client_id: frigate
        user: ejarrett
        password: '{FRIGATE_MQTT_PASSWORD}'
        stats_interval: 60
      ui:
        timezone: America/Chicago
      detectors:
        coral:
          type: edgetpu
          device: pci
      objects:
        track:
          - person
          - cat
          - car
          - dog
      go2rtc:
        streams:
          4kcamera:
            - rtsp://admin:{FRIGATE_CAMERA_PASSWORD}@{FRIGATE_CAMERA_4K}:554/h264Preview_01_sub
            - "ffmpeg:4kcamera#video=h264#audio=aac"
          driveway:
            - rtsp://admin:{FRIGATE_CAMERA_PASSWORD}@{FRIGATE_CAMERA_DRIVEWAY}:554/h264Preview_01_main
            - "ffmpeg:driveway#video=h264#audio=aac"
      record:
        enabled: True
        retain:
          days: 0
          mode: all
      ffmpeg:
        hwaccel_args: preset-intel-qsv-h264
        output_args:
          record: preset-record-generic-audio-copy
      cameras:
        4kcamera:
          ffmpeg:
            inputs:
            - path: rtsp://127.0.0.1:8554/4kcamera
              roles:
                - detect
                - record
          detect:
            enabled: True
          snapshots:
            enabled: True
        driveway:
          ffmpeg:
            inputs:
            - path: rtsp://127.0.0.1:8554/driveway
              roles:
                - detect
                - record
          detect:
            enabled: True
          snapshots:
            enabled: True
            required_zones:
              - front_house
          zones:
            front_house:
              coordinates: 0,1920,2560,1920,2560,1302,2560,751,2505,739,2347,708,2220,622,2211,346,1697,304,1155,297,525,358
          objects:
            filters:
              person:
                min_area: 1000
                mask: 1350,500,1300,500,1300,400,1350,400
              car:
                min_area: 10000
    # Probes configuration
    probes:
      liveness:
        enabled: true
        initialDelaySeconds: 30
        failureThreshold: 5
        timeoutSeconds: 10
      readiness:
        enabled: true
        initialDelaySeconds: 30
        failureThreshold: 5
        timeoutSeconds: 10
      startup:
        enabled: false
        failureThreshold: 30
        periodSeconds: 10

    service:
      # -- Type of Service to use
      type: ClusterIP
      # -- Port the Service should communicate on
      port: 5000
      ## Specify the nodePort value for the LoadBalancer and NodePort service types.
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ##
      # nodePort:
      ## Provide any additional annotations which may be required. This can be used to
      ## set the LoadBalancer service type to internal only.
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      annotations: {}
      labels: {}

      # -- Set specific IP address for LoadBalancer. `service.type` must be set to `LoadBalancer`
      loadBalancerIP:

      # loadBalancerSourceRanges: []
      ## Set the externalTrafficPolicy in the Service to either Cluster or Local
      # externalTrafficPolicy: Cluster

      # default IP family to use for the service
      ipFamilyPolicy: SingleStack
      # ipFamilies for service
      ipFamilies: []

    ingress:
      # -- Enables the use of an Ingress Controller to front the Service and can provide HTTPS
      enabled: false

      # -- ingressClassName for using on clusters with multiple ingresses, default is null
      ingressClassName: ~

      # -- annotations to configure your Ingress. See your Ingress Controller's Docs for more info.
      annotations: {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
        # For NGINX INC, these may be neccessary
        # nginx.org/proxy-read-timeout: "3600"
        # nginx.org/proxy-send-timeout: "3600"
        # nginx.org/websocket-services: "<release_name>-frigate" # TODO: can this be automated?

      # -- list of hosts and their paths and ports that ingress controller should repsond to.
      # -- alternatively use `http` if anonymous auth is allowed 
      hosts:
        - host: chart.example.local
          paths:
            - path: '/'
              portName: http-auth

      # -- list of TLS configurations
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

    persistence:
      data:
        # Data directory is obsolete. Use config and media instead.
        enabled: false
        accessMode: ReadWriteOnce
        size: 10Gi
        skipuninstall: false

      config:
        # -- Enables persistence for the config directory
        enabled: false
        ## frigate data Persistent Volume Storage Class
        ## If defined, storageClassName: <storageClass>
        ## If set to "-", storageClassName: "", which disables dynamic provisioning
        ## If undefined (the default) or set to null, no storageClassName spec is
        ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
        ##   GKE, AWS & OpenStack)
        ##
        # storageClass: "-"
        ##
        ## If you want to reuse an existing claim, you can pass the name of the PVC using
        ## the existingClaim variable
        # existingClaim: your-claim
        # subPath: some-subpath

        # -- [access mode](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes) to use for the PVC
        accessMode: ReadWriteOnce

        # -- size/capacity of the PVC
        size: 100Mi

        # -- Do not delete the pvc upon helm uninstall
        skipuninstall: false

      media:
        # -- Enables persistence for the media directory
        enabled: false
        ## frigate data Persistent Volume Storage Class
        ## If defined, storageClassName: <storageClass>
        ## If set to "-", storageClassName: "", which disables dynamic provisioning
        ## If undefined (the default) or set to null, no storageClassName spec is
        ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
        ##   GKE, AWS & OpenStack)
        ##
        # storageClass: "-"
        ##
        ## If you want to reuse an existing claim, you can pass the name of the PVC using
        ## the existingClaim variable
        # existingClaim: your-claim
        # subPath: some-subpath

        # -- [access mode](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes) to use for the PVC
        accessMode: ReadWriteOnce

        # -- size/capacity of the PVC
        size: 10Gi

        # -- Do not delete the pvc upon helm uninstall
        skipuninstall: false

    # -- Set resource limits/requests for the Pod(s)
    resources: {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      #   gpu.intel.com/i915: 1
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
      #   gpu.intel.com/i915: 1

    # -- Set Security Context
    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
      # privileged: true

    # -- Node Selector configuration
    nodeSelector: {}

    # -- Node toleration configuration
    tolerations: []

    # -- Set Pod affinity rules
    affinity: {}

    # -- Set additonal pod Annotations
    podAnnotations: {}
