apiVersion: v1
kind: Namespace
metadata:
  name: jellyfin
  labels:
    pod-security.kubernetes.io/enforce: privileged
    pod-security.kubernetes.io/audit: privileged
    pod-security.kubernetes.io/warn: privileged
---
apiVersion: gateway.networking.k8s.io/v1beta1
kind: HTTPRoute
metadata:
  name: jellyfintwo-tls-route
  namespace: jellyfin
spec:
  parentRefs:
  - name: jarrett-net
    namespace: gateway
  hostnames:
  - "jellyfintwo.j5t.io"
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /
    backendRefs:
    - name: jellyfin-tcp
      port: 8096
---
kind: Service
apiVersion: v1
metadata:
  name: jellyfin-udp
  namespace: jellyfin
  annotations:
    metallb.universe.tf/allow-shared-ip: jellyfin
spec:
  selector:
    app: jellyfin
  ports:
  - port: 7359
    targetPort: 7359
    name: discovery-udp
    protocol: UDP
  type: LoadBalancer
  loadBalancerIP: 192.168.3.13
  sessionAffinity: ClientIP
---
kind: Service
apiVersion: v1
metadata:
  name: jellyfin-tcp
  namespace: jellyfin
  annotations:
    metallb.universe.tf/allow-shared-ip: jellyfin
spec:
  selector:
    app: jellyfin
  ports:
  - port: 8096
    targetPort: 8096
    name: http-tcp
    protocol: TCP
  type: LoadBalancer
  loadBalancerIP: 192.168.3.13
  sessionAffinity: ClientIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jellyfin-config-pvc
  namespace: jellyfin
spec:
  storageClassName: longhorn
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jellyfin-cache-pvc
  namespace: jellyfin
spec:
  storageClassName: longhorn
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jellyfin
  namespace: jellyfin
  labels:
    app: jellyfin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jellyfin
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: jellyfin
        name: jellyfin
    spec:
      nodeSelector:
        #feature.node.kubernetes.io/rk3588: 'true'
        intel.feature.node.kubernetes.io/gpu: 'true'
      containers:
        - name: intel-gpu-top
          image: ghcr.io/xpenology-community/docker-intel-gpu-tools:latest
          command: ["/bin/bash", "-c", "while true; do sleep 30; done"]
          resources:
            limits:
              memory: "2Gi"
              cpu: "1"
              gpu.intel.com/i915: "1" # Request Intel GPU resource
          securityContext:
            privileged: true # Required for PMU access
            runAsUser: 0
            runAsGroup: 0
        - name: "jellyfin"
          image: jellyfin/jellyfin
          ports:
          - containerPort: 8096
            name: http-tcp
            protocol: TCP
          - containerPort: 8920
            name: https-tcp
            protocol: TCP
          - containerPort: 1900
            name: dlna-udp
            protocol: UDP
          - containerPort: 7359
            name: discovery-udp
            protocol: UDP
          env:
          - name: JELLYFIN_PublishedServerUrl
            value: 192.168.3.13
          resources:
            limits:
              memory: "12Gi"
              cpu: "4"
              gpu.intel.com/i915: "1"
          securityContext:
            privileged: true
          volumeMounts:
          - name: jellyfin-cache
            mountPath: /cache
          - name: jellyfin-config
            mountPath: /config
          - name: jellyfin-transcode
            mountPath: /transcode
          - name: jellyfin-media
            mountPath: /media
      volumes:
      - name: shared-bin
        emptyDir: {}
      - name: jellyfin-cache
        persistentVolumeClaim:
          claimName: jellyfin-cache-pvc
      - name: jellyfin-transcode
        emptyDir: {}
      - name: jellyfin-config
        persistentVolumeClaim:
          claimName: jellyfin-config-pvc
      - name: jellyfin-media
        nfs:
          server: 192.168.0.58
          path: /mnt/Pool-1.18.6/movies
